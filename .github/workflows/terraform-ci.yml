# This GitHub workflow tests and validates Terraform config (ML resource config and more)
# defined under databricks-config, when PRs are merged into the main branch
name: Terraform Tests for my-mlops-project

on:
  workflow_dispatch:
  pull_request_target:
    paths:
      - 'databricks-config/**'

defaults:
  run:
    working-directory: ./databricks-config

# Code reference can be found at https://github.com/hashicorp/setup-terraform
jobs:
  staging:
    concurrency: my-mlops-project-staging-terraform-job
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://dbc-38ce632c-4934.cloud.databricks.com
      DATABRICKS_TOKEN: ${{secrets.STAGING_WORKSPACE_TOKEN}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          # Below we assume you've run the setup scripts under the cicd-setup-scripts directory
          # to create an AWS S3 bucket and IAM user with permission to access the bucket, and stored
          # an access key for the IAM user as Github Actions secrets with
          # name AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. We set corresponding environment variables to authenticate to
          # the s3 backend as described in https://www.terraform.io/language/settings/backends/s3#credentials-and-shared-configuration
          echo "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" >> "$GITHUB_ENV"
      - name: Terraform Init
        id: init
        run: terraform -chdir=staging init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=staging validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=staging plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      #- name: Create Comment with Terraform Plan
      #  uses: actions/github-script@v6
      #  id: comment
      #  env:
      #    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    script: |
      #      const output = `#### Terraform Staging Format and Style üñå \`${{ steps.fmt.outcome }}\`
      #      #### Terraform Staging Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
      #      #### Terraform Staging Validation ü§ñ \`${{ steps.validate.outcome }}\`
      #      <details><summary>Staging Validation Output</summary>
#
      #      \`\`\`\n
      #      ${{ steps.validate.outputs.stdout }}
      #      \`\`\`
#
      #      </details>
#
      #      #### Terraform Staging Plan üìñ \`${{ steps.plan.outcome }}\`
#
      #      <details><summary>Show Staging Plan</summary>
#
      #      \`\`\`\n
      #      ${process.env.PLAN}
      #      \`\`\`
#
      #      </details>`
#
      #      github.rest.issues.createComment({
      #        issue_number: context.issue.number,
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        body: output
      #      })
  prod:
    concurrency: my-mlops-project-prod-terraform-job
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://dbc-96a52355-626c.cloud.databricks.com
      DATABRICKS_TOKEN: ${{secrets.PROD_WORKSPACE_TOKEN}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive -diff
        continue-on-error: true
      - name: Configure Terraform state backend authentication
        run: |
          echo "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" >> "$GITHUB_ENV"
          echo "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" >> "$GITHUB_ENV"
      - name: Terraform Init
        id: init
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=prod validate -no-color
      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}"
      #- name: Create Comment with Terraform Plan
      #  uses: actions/github-script@v6
      #  id: comment
      #  env:
      #    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #  with:
      #    github-token: ${{ secrets.GITHUB_TOKEN }}
      #    script: |
      #      const output = `#### Terraform Prod Format and Style üñå \`${{ steps.fmt.outcome }}\`
      #      #### Terraform Prod Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
      #      #### Terraform Prod Validation ü§ñ \`${{ steps.validate.outcome }}\`
      #      <details><summary>Prod Validation Output</summary>
#
      #      \`\`\`\n
      #      ${{ steps.validate.outputs.stdout }}
      #      \`\`\`
#
      #      </details>
#
      #      #### Terraform Prod Plan üìñ \`${{ steps.plan.outcome }}\`
#
      #      <details><summary>Show Prod Plan</summary>
#
      #      \`\`\`\n
      #      ${process.env.PLAN}
      #      \`\`\`
#
      #      </details>`
#
      #      github.rest.issues.createComment({
      #        issue_number: context.issue.number,
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        body: output
      #      })
